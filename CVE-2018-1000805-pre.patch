Backport of:

From 852176d2d776b183a39e100009d3e18b6896323b Mon Sep 17 00:00:00 2001
From: Jeff Forcier <jeff@bitprophet.org>
Date: Tue, 18 Sep 2018 18:21:33 -0700
Subject: [PATCH] Fix a pseudo-bug re: responding to MSG_UNIMPLEMENTED w/
 itself

---
 dev-requirements.txt    |  1 +
 paramiko/transport.py   | 23 ++++++++++++++++++-----
 sites/www/changelog.rst |  5 +++++
 tests/test_transport.py | 25 +++++++++++++++++++++++++
 4 files changed, 49 insertions(+), 5 deletions(-)

Index: paramiko-2.0.0/paramiko/transport.py
===================================================================
--- paramiko-2.0.0.orig/paramiko/transport.py	2018-10-16 10:00:15.172639558 -0400
+++ paramiko-2.0.0/paramiko/transport.py	2018-10-16 10:01:13.772755575 -0400
@@ -49,7 +49,7 @@ from paramiko.common import xffffffff, c
     MSG_CHANNEL_EXTENDED_DATA, MSG_CHANNEL_WINDOW_ADJUST, MSG_CHANNEL_REQUEST, \
     MSG_CHANNEL_EOF, MSG_CHANNEL_CLOSE, MIN_WINDOW_SIZE, MIN_PACKET_SIZE, \
     MAX_WINDOW_SIZE, DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE, \
-    HIGHEST_USERAUTH_MESSAGE_ID
+    HIGHEST_USERAUTH_MESSAGE_ID, MSG_UNIMPLEMENTED, MSG_NAMES
 from paramiko.compress import ZlibCompressor, ZlibDecompressor
 from paramiko.dsskey import DSSKey
 from paramiko.kex_gex import KexGex, KexGexSHA256
@@ -1815,11 +1815,22 @@ class Transport (threading.Thread, Closi
                     elif (self.auth_handler is not None) and (ptype in self.auth_handler._handler_table):
                         self.auth_handler._handler_table[ptype](self.auth_handler, m)
                     else:
-                        self._log(WARNING, 'Oops, unhandled type %d' % ptype)
-                        msg = Message()
-                        msg.add_byte(cMSG_UNIMPLEMENTED)
-                        msg.add_int(m.seqno)
-                        self._send_message(msg)
+                        # Respond with "I don't implement this particular
+                        # message type" message (unless the message type was
+                        # itself literally MSG_UNIMPLEMENTED, in which case, we
+                        # just shut up to avoid causing a useless loop).
+                        name = MSG_NAMES[ptype]
+                        self._log(
+                            WARNING,
+                            "Oops, unhandled type {} ({!r})".format(
+                                ptype, name
+                            ),
+                        )
+                        if ptype != MSG_UNIMPLEMENTED:
+                            msg = Message()
+                            msg.add_byte(cMSG_UNIMPLEMENTED)
+                            msg.add_int(m.seqno)
+                            self._send_message(msg)
                     self.packetizer.complete_handshake()
             except SSHException as e:
                 self._log(ERROR, 'Exception: ' + str(e))
Index: paramiko-2.0.0/tests/test_transport.py
===================================================================
--- paramiko-2.0.0.orig/tests/test_transport.py	2018-10-16 10:00:15.172639558 -0400
+++ paramiko-2.0.0/tests/test_transport.py	2018-10-16 10:01:35.616800129 -0400
@@ -30,12 +30,14 @@ import threading
 import random
 from hashlib import sha1
 import unittest
+from mock import Mock
 
 from paramiko import Transport, SecurityOptions, ServerInterface, RSAKey, DSSKey, \
     SSHException, ChannelException, Packetizer, Channel
 from paramiko import AUTH_FAILED, AUTH_SUCCESSFUL
 from paramiko import OPEN_SUCCEEDED, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED
 from paramiko.common import MSG_KEXINIT, cMSG_CHANNEL_WINDOW_ADJUST, \
+                            cMSG_UNIMPLEMENTED, \
                             MIN_PACKET_SIZE, MIN_WINDOW_SIZE, MAX_WINDOW_SIZE, \
                             DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE
 from paramiko.py3compat import bytes
@@ -873,3 +875,26 @@ class TransportTest(unittest.TestCase):
             assert "forwarding request denied" in str(e)
         else:
             assert False, "Did not raise SSHException!"
+
+    def _send_unimplemented(self, server_is_sender):
+        self.setup_test_server()
+        sender, recipient = self.tc, self.ts
+        if server_is_sender:
+            sender, recipient = self.ts, self.tc
+        recipient._send_message = Mock()
+        msg = Message()
+        msg.add_byte(cMSG_UNIMPLEMENTED)
+        sender._send_message(msg)
+        # TODO: I hate this but I literally don't see a good way to know when
+        # the recipient has received the sender's message (there are no
+        # existing threading events in play that work for this), esp in this
+        # case where we don't WANT a response (as otherwise we could
+        # potentially try blocking on the sender's receipt of a reply...maybe).
+        time.sleep(0.1)
+        assert not recipient._send_message.called
+
+    def test_server_does_not_respond_to_MSG_UNIMPLEMENTED(self):
+        self._send_unimplemented(server_is_sender=False)
+
+    def test_client_does_not_respond_to_MSG_UNIMPLEMENTED(self):
+        self._send_unimplemented(server_is_sender=True)
